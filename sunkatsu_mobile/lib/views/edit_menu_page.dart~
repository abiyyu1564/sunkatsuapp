import 'package:flutter/material.dart';
<<<<<<< Updated upstream

class EditMenuPage extends StatefulWidget {
  final String initialName;
  final String initialCategory;
  final String initialPrice;
  final String initialDescription;
  final String initialImage;
  final String imageUrl;

  const EditMenuPage({
    super.key,
    this.initialName = 'Chicken Katsu',
    this.initialCategory = 'Food',
    this.initialPrice = '25.000',
    this.initialDescription = 'Lorem ipsum',
    this.initialImage = 'Katsu.png',
    this.imageUrl = 'https://hebbkx1anhila5yf.public.blob.vercel-storage.com/image-kLxFO8TEkLK0da8yBegS4hwRpqNbTT.png',
  });
=======
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:sunkatsu_mobile/utils/jwt_utils.dart';
import 'dart:io';
import 'package:image_picker/image_picker.dart';
import 'package:http_parser/http_parser.dart';
import 'package:mime/mime.dart';

class EditMenuPage extends StatefulWidget {
  final Map<String, dynamic> foodData;

  const EditMenuPage({super.key, required this.foodData});
>>>>>>> Stashed changes

  @override
  State<EditMenuPage> createState() => _EditMenuPageState();
}

class _EditMenuPageState extends State<EditMenuPage> {
  late TextEditingController nameController;
<<<<<<< Updated upstream
  late TextEditingController categoryController;
  late TextEditingController priceController;
  late TextEditingController descriptionController;
  late TextEditingController imageController;
=======
  late TextEditingController priceController;
  late TextEditingController descriptionController;
  late TextEditingController imageController;
  String? imageToDisplay;
  File? imageFile;
  String selectedCategory = '';
  bool isProcessingImage = false;
  bool isSubmitting = false;
  bool isDeleting = false;

  final ImagePicker _picker = ImagePicker();

  // Fungsi pilih gambar dari galeri
  Future<void> _pickImage() async {
    try {
      final XFile? image = await _picker.pickImage(source: ImageSource.gallery);
      if (image != null) {
        setState(() {
          imageFile = File(image.path);
          imageController.text = image.name;
          isProcessingImage = true;
        });

        // Simulate background removal process
        await Future.delayed(const Duration(seconds: 2));

        setState(() {
          isProcessingImage = false;
        });


      }
    } catch (e) {
      setState(() {
        isProcessingImage = false;
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error picking image: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  // Fungsi pilih gambar dari kamera
  Future<void> _pickImageFromCamera() async {
    try {
      final XFile? image = await _picker.pickImage(source: ImageSource.camera);
      if (image != null) {
        setState(() {
          imageFile = File(image.path);
          imageController.text = image.name;
          isProcessingImage = true;
        });

        // Simulate background removal process
        await Future.delayed(const Duration(seconds: 2));

        setState(() {
          isProcessingImage = false;
        });
      }
    } catch (e) {
      setState(() {
        isProcessingImage = false;
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error picking image: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  // Fungsi untuk menampilkan opsi pilihan gambar
  void _showImagePickerOptions() {
    showModalBottomSheet(
      context: context,
      builder: (BuildContext context) {
        return SafeArea(
          child: Wrap(
            children: <Widget>[
              ListTile(
                leading: const Icon(Icons.photo_library),
                title: const Text('Photo Library'),
                onTap: () {
                  Navigator.of(context).pop();
                  _pickImage();
                },
              ),
              ListTile(
                leading: const Icon(Icons.photo_camera),
                title: const Text('Camera'),
                onTap: () {
                  Navigator.of(context).pop();
                  _pickImageFromCamera();
                },
              ),
            ],
          ),
        );
      },
    );
  }

  // Fungsi Delete Menu
  Future<void> _deleteMenu() async {
    setState(() {
      isDeleting = true;
    });

    try {
      final token = await JwtUtils.getToken();
      if (token == null) {
        setState(() {
          isDeleting = false;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Authentication token not found'),
            backgroundColor: Colors.red,
          ),
        );
        return;
      }

      final id = widget.foodData['id'];
      final response = await http.delete(
        Uri.parse('http://localhost:8080/api/menus/$id'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
      );

      if (response.statusCode == 200 || response.statusCode == 204) {
        // Successful deletion
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Menu deleted successfully'),
            backgroundColor: Colors.green,
          ),
        );

        // Return to previous screen with deletion status
        Navigator.pop(context, {'deleted': true});
      } else {
        // Failed deletion
        debugPrint('Delete failed with status: ${response.statusCode}');
        debugPrint('Response body: ${response.body}');

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to delete menu: ${response.statusCode}'),
            backgroundColor: Colors.red,
          ),
        );
        setState(() {
          isDeleting = false;
        });
      }
    } catch (e) {
      debugPrint('Error deleting menu: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error deleting menu: $e'),
          backgroundColor: Colors.red,
        ),
      );
      setState(() {
        isDeleting = false;
      });
    }
  }

  // Fungsi Edit Menu
  Future<void> _saveChanges(BuildContext context) async {
    // Validate inputs
    if (nameController.text.isEmpty ||
        priceController.text.isEmpty ||
        descriptionController.text.isEmpty ||
        selectedCategory.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please fill all required fields'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    setState(() {
      isSubmitting = true;
    });

    final token = await JwtUtils.getToken();
    if (token == null) {
      setState(() {
        isSubmitting = false;
      });
      return;
    }

    final id = widget.foodData['id'];

    // Buat URI dengan query parameters
    final uri = Uri.parse('http://localhost:8080/api/menus/$id').replace(queryParameters: {
      'name': nameController.text,
      'price': priceController.text,
      'desc': descriptionController.text,
      'category': selectedCategory,
      'nums_bought': (widget.foodData['nums_bought'] ?? 0).toString(),
    });

    try {
      final request = http.MultipartRequest('PUT', uri)
        ..headers['Authorization'] = 'Bearer $token';

      // Jika user memilih gambar baru
      if (imageFile != null) {
        final fileName = imageFile!.path.split('/').last;
        final mimeType = lookupMimeType(imageFile!.path);

        debugPrint('üñºÔ∏è Selected image: $fileName (MIME: $mimeType)');

        // Validasi MIME type agar sesuai backend
        if (mimeType != 'image/jpeg' && mimeType != 'image/png') {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text("File harus berupa gambar .jpg/.jpeg atau .png")),
          );
          setState(() {
            isSubmitting = false;
          });
          return;
        }

        request.files.add(
          await http.MultipartFile.fromPath(
            'file',
            imageFile!.path,
            contentType: MediaType.parse(mimeType!),
          ),
        );
      } else {
        debugPrint('üìÅ No new image selected. Using existing image.');
      }

      final streamedResponse = await request.send();
      final response = await http.Response.fromStream(streamedResponse);

      if (response.statusCode == 200) {
        final updatedData = jsonDecode(response.body);

        Navigator.pop(context, {
          'name': nameController.text,
          'price': int.tryParse(priceController.text) ?? 0,
          'category': selectedCategory,
          'description': descriptionController.text,
          'image': updatedData['image'], // <-- ini yang AKURAT
        });
        return;
      }

      debugPrint("RESPONSE STATUS: ${response.statusCode}");
      debugPrint("RESPONSE BODY: ${response.body}");

      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("Berhasil menyimpan perubahan")),
        );
        Navigator.pop(context, {
          'name': nameController.text,
          'price': int.tryParse(priceController.text) ?? 0,
          'category': selectedCategory,
          'description': descriptionController.text,
          'image': imageFile != null
              ? imageFile!.path.split('/').last // atau pakai nama dari server jika ada
              : widget.foodData['image'],
        });
        // kembali ke halaman sebelumnya
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Gagal menyimpan: ${response.statusCode}")),
        );
      }
    } catch (e) {
      debugPrint("‚ùå Error saat upload: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Terjadi kesalahan saat menyimpan")),
      );
    } finally {
      setState(() {
        isSubmitting = false;
      });
    }
  }

  // Fungsi untuk mengambil gambar menggunakan http
  Future<void> fetchImage(String imageName) async {
    try {
      final token = await JwtUtils.getToken();
      final path = imageName.startsWith('/')
          ? imageName
          : '/api/menus/images/$imageName';

      final response = await http.get(
        Uri.parse('http://localhost:8080$path'),
        headers: {
          'Authorization': 'Bearer $token',
        },
      );

      if (response.statusCode == 200) {
        final byteData = response.bodyBytes;
        final imageUrl = Uri.dataFromBytes(byteData, mimeType: 'image/png').toString();

        setState(() {
          imageToDisplay = imageUrl;
        });
      } else {
        throw Exception('Failed to load image');
      }
    } catch (e) {
      debugPrint('Error fetching image: $e');
      setState(() {
        imageToDisplay = null; // Biarkan null untuk menampilkan Icon error
      });
    }
  }
>>>>>>> Stashed changes

  @override
  void initState() {
    super.initState();
<<<<<<< Updated upstream
    nameController = TextEditingController(text: widget.initialName);
    categoryController = TextEditingController(text: widget.initialCategory);
    priceController = TextEditingController(text: widget.initialPrice);
    descriptionController = TextEditingController(text: widget.initialDescription);
    imageController = TextEditingController(text: widget.initialImage);
=======
    nameController = TextEditingController(text: widget.foodData['name'] ?? '');
    priceController = TextEditingController(text: widget.foodData['price'].toString());
    descriptionController = TextEditingController(text: widget.foodData['description'] ?? '');
    imageController = TextEditingController(text: widget.foodData['image'] ?? '');

    // Set initial category
    selectedCategory = (widget.foodData['category'] ?? '').toLowerCase();

    // Tambahkan pemanggilan fungsi fetchImage di sini
    if (imageController.text.isNotEmpty) {
      fetchImage(imageController.text);
    }
>>>>>>> Stashed changes
  }

  @override
  void dispose() {
    nameController.dispose();
<<<<<<< Updated upstream
    categoryController.dispose();
=======
>>>>>>> Stashed changes
    priceController.dispose();
    descriptionController.dispose();
    imageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // Red background for top section
          Container(
            height: MediaQuery.of(context).size.height * 0.4,
            color: const Color(0xFFE15B5B),
          ),

          // White curved container
          Align(
            alignment: Alignment.bottomCenter,
            child: Container(
              height: MediaQuery.of(context).size.height * 0.7,
              decoration: const BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(30),
                  topRight: Radius.circular(30),
                ),
              ),
            ),
          ),

          // Content
          SafeArea(
            child: Column(
              children: [
<<<<<<< Updated upstream
                // Back button (optional)
=======
                // Back button
>>>>>>> Stashed changes
                Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Align(
                    alignment: Alignment.topLeft,
                    child: GestureDetector(
                      onTap: () {
                        Navigator.pop(context);
                      },
                      child: const Icon(
                        Icons.arrow_back,
                        color: Colors.white,
                      ),
                    ),
                  ),
                ),

<<<<<<< Updated upstream
                const SizedBox(height: 30),

                // Food image
                Center(
                  child: Container(
                    width: 200,
                    height: 200,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.1),
                          spreadRadius: 2,
                          blurRadius: 10,
                          offset: const Offset(0, 5),
                        ),
                      ],
                    ),
                    child: ClipOval(
                      child: Image.network(
                        widget.imageUrl,
                        fit: BoxFit.cover,
                      ),
                    ),
                  ),
                ),

                // Form fields
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.all(24.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Form fields
                        _buildFormField('Menu name', nameController),
                        const SizedBox(height: 16),
                        _buildFormField('Menu category', categoryController),
                        const SizedBox(height: 16),
                        _buildFormField('Menu price', priceController),
                        const SizedBox(height: 16),
                        _buildFormField('Menu description', descriptionController),
                        const SizedBox(height: 16),
                        _buildFormField('Menu image', imageController),

                        const Spacer(),

                        // Divider
                        const Padding(
                          padding: EdgeInsets.symmetric(vertical: 16.0),
                          child: Divider(
                            color: Colors.grey,
                            thickness: 1,
                            height: 1,

                          ),
                        ),

                        // Action buttons - Updated to match the design
                        Padding(
                          padding: const EdgeInsets.only(bottom: 16.0),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                            children: [
                              // Delete button
                              Expanded(
                                child: ElevatedButton(
                                  onPressed: () {
                                    _showDeleteConfirmation(context);
                                  },
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: const Color(0xFFE15B5B),
                                    foregroundColor: Colors.white,
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(30),
                                    ),
                                    padding: const EdgeInsets.symmetric(
                                      vertical: 16,
                                    ),
                                  ),
                                  child: const Text(
                                    'Delete Menu',
                                    style: TextStyle(
                                      fontSize: 16,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ),
                              ),

                              const SizedBox(width: 8),

                              // Discard button
                              Expanded(
                                child: OutlinedButton(
                                  onPressed: () {
                                    Navigator.pop(context);
                                  },
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: Colors.black,
                                    backgroundColor: Colors.white,
                                    side: BorderSide(color: Colors.grey[300]!),
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(30),
                                    ),
                                    padding: const EdgeInsets.symmetric(
                                      vertical: 16,
                                    ),
                                  ),
                                  child: Padding(
                                    padding: const EdgeInsets.symmetric(horizontal: 0), // tambahkan padding horizontal
                                    child: const Text(
                                      'Discard Change',
                                      style: TextStyle(
                                        fontSize: 16,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ),
                                ),
                              ),

                              const SizedBox(width: 8),

                              // Save button
                              Expanded(
                                child: ElevatedButton(
                                  onPressed: () {
                                    _saveChanges(context);
                                  },
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.black,
                                    foregroundColor: Colors.white,
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(30),
                                    ),
                                    padding: const EdgeInsets.symmetric(
                                      vertical: 16,
                                    ),
                                  ),
                                  child: const Text(
                                    'Save Change',
                                    style: TextStyle(
                                      fontSize: 16,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
=======
                // Scrollable content
                Expanded(
                  child: SingleChildScrollView(
                    child: Column(
                      children: [
                        const SizedBox(height: 20),

                        // Image placeholder or selected image
                        GestureDetector(
                          onTap: isProcessingImage ? null : _showImagePickerOptions,
                          child: Center(
                            child: Container(
                              width: 200,
                              height: 200,
                              decoration: BoxDecoration(
                                color: Colors.grey[200],
                                shape: BoxShape.circle,
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.black.withOpacity(0.1),
                                    spreadRadius: 2,
                                    blurRadius: 10,
                                    offset: const Offset(0, 5),
                                  ),
                                ],
                              ),
                              child: isProcessingImage
                                  ? const Center(
                                child: CircularProgressIndicator(
                                  color: Color(0xFFE15B5B),
                                ),
                              )
                                  : ClipOval(
                                child: imageFile != null
                                    ? Image.file(
                                  imageFile!,
                                  fit: BoxFit.cover,
                                  width: 200,
                                  height: 200,
                                )
                                    : (imageToDisplay != null
                                    ? Image.memory(
                                  Uri.parse(imageToDisplay!).data!.contentAsBytes(),
                                  fit: BoxFit.cover,
                                  width: 200,
                                  height: 200,
                                  errorBuilder: (context, error, stackTrace) =>
                                  const Icon(Icons.broken_image, size: 100),
                                )
                                    : const Center(child: CircularProgressIndicator())),
                              ),
                            ),
                          ),
                        ),

                        // Form fields
                        Padding(
                          padding: const EdgeInsets.all(24.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Menu name
                              _buildFormField('Menu name', nameController, 'Enter menu name'),
                              const SizedBox(height: 16),

                              // Menu category (dropdown)
                              Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    'Menu category',
                                    style: TextStyle(
                                      fontSize: 14,
                                      color: Colors.grey[600],
                                    ),
                                  ),
                                  const SizedBox(height: 4),
                                  Container(
                                    decoration: BoxDecoration(
                                      border: Border(
                                        bottom: BorderSide(
                                          color: Colors.grey[300]!,
                                          width: 1,
                                        ),
                                      ),
                                    ),
                                    child: DropdownButtonHideUnderline(
                                      child: DropdownButton<String>(
                                        isExpanded: true,
                                        hint: Text(
                                          'Select categories',
                                          style: TextStyle(
                                            color: Colors.grey[400],
                                            fontSize: 16,
                                          ),
                                        ),
                                        value: selectedCategory.isEmpty ? null : selectedCategory,
                                        onChanged: (String? newValue) {
                                          setState(() {
                                            selectedCategory = newValue!;
                                          });
                                        },
                                        items: <String>['Food', 'Drink', 'Dessert']
                                            .map<DropdownMenuItem<String>>((String value) {
                                          return DropdownMenuItem<String>(
                                            value: value.toLowerCase(),
                                            child: Text(value),
                                          );
                                        }).toList(),
                                      ),
                                    ),
                                  ),
                                ],
                              ),

                              const SizedBox(height: 16),

                              // Menu price
                              _buildFormField('Menu price', priceController, 'Enter a price', isNumber: true),
                              const SizedBox(height: 16),

                              // Menu description
                              _buildFormField('Menu description', descriptionController, 'Write description'),

                              // Divider
                              const Padding(
                                padding: EdgeInsets.symmetric(vertical: 10),
                                child: Divider(
                                  color: Colors.white,
                                  thickness: 1,
                                  height: 1,
                                ),
                              ),

                              // Action buttons - Keeping the original 3 buttons
                              Padding(
                                padding: const EdgeInsets.only(bottom: 16.0),
                                child: Row(
                                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                  children: [
                                    // Delete button
                                    Expanded(
                                      child: ElevatedButton(
                                        onPressed: isDeleting || isSubmitting ? null : () {
                                          _showDeleteConfirmation(context);
                                        },
                                        style: ElevatedButton.styleFrom(
                                          backgroundColor: const Color(0xFFE15B5B),
                                          foregroundColor: Colors.white,
                                          shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(30),
                                          ),
                                          padding: const EdgeInsets.symmetric(
                                            vertical: 16,
                                          ),
                                        ),
                                        child: Text(
                                          isDeleting ? 'Deleting...' : 'Delete Menu',
                                          style: const TextStyle(
                                            fontSize: 15,
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                      ),
                                    ),

                                    const SizedBox(width: 8),

                                    // Discard button
                                    Expanded(
                                      child: OutlinedButton(
                                        onPressed: isSubmitting || isDeleting ? null : () {
                                          Navigator.pop(context);
                                        },
                                        style: OutlinedButton.styleFrom(
                                          foregroundColor: Colors.black,
                                          backgroundColor: Colors.white,
                                          side: BorderSide(color: Colors.grey[300]!),
                                          shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(30),
                                          ),
                                          padding: const EdgeInsets.symmetric(
                                            vertical: 16,
                                          ),
                                        ),
                                        child: const Text(
                                          'Discard Change',
                                          style: TextStyle(
                                            fontSize: 15,
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                      ),
                                    ),

                                    const SizedBox(width: 8),

                                    // Save button
                                    Expanded(
                                      child: ElevatedButton(
                                        onPressed: isSubmitting || isProcessingImage || isDeleting ? null : () {
                                          _saveChanges(context);
                                        },
                                        style: ElevatedButton.styleFrom(
                                          backgroundColor: Colors.black,
                                          foregroundColor: Colors.white,
                                          shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(30),
                                          ),
                                          padding: const EdgeInsets.symmetric(
                                            vertical: 16,
                                          ),
                                        ),
                                        child: Text(
                                          isSubmitting ? 'Submitting...' : 'Save Change',
                                          style: const TextStyle(
                                            fontSize: 15,
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                      ),
                                    ),
                                  ],
>>>>>>> Stashed changes
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

<<<<<<< Updated upstream
  Widget _buildFormField(String label, TextEditingController controller) {
=======
  Widget _buildFormField(String label, TextEditingController controller, String hintText, {bool isNumber = false, bool readOnly = false}) {
>>>>>>> Stashed changes
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: TextStyle(
            fontSize: 14,
            color: Colors.grey[600],
          ),
        ),
        const SizedBox(height: 4),
        Container(
          decoration: BoxDecoration(
            border: Border(
              bottom: BorderSide(
                color: Colors.grey[300]!,
                width: 1,
              ),
            ),
          ),
          child: Row(
            children: [
              Expanded(
                child: TextField(
                  controller: controller,
<<<<<<< Updated upstream
                  decoration: const InputDecoration(
                    border: InputBorder.none,
                    contentPadding: EdgeInsets.symmetric(vertical: 8),
=======
                  keyboardType: isNumber ? TextInputType.number : TextInputType.text,
                  readOnly: readOnly,
                  decoration: InputDecoration(
                    hintText: hintText,
                    hintStyle: TextStyle(
                      color: Colors.grey[400],
                      fontSize: 16,
                    ),
                    border: InputBorder.none,
                    contentPadding: const EdgeInsets.symmetric(vertical: 8),
>>>>>>> Stashed changes
                  ),
                  style: const TextStyle(
                    fontSize: 16,
                  ),
                ),
              ),
              GestureDetector(
                onTap: () {
                  // Edit field
<<<<<<< Updated upstream
=======
                  if (label == 'Menu image') {
                    _showImagePickerOptions();
                  }
>>>>>>> Stashed changes
                },
                child: Container(
                  width: 24,
                  height: 24,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Image.network(
                    'https://hebbkx1anhila5yf.public.blob.vercel-storage.com/image-HeNNMtyGA0p13lPZtc9lNuVtND3Uxh.png',
                    width: 16,
                    height: 16,
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  void _showDeleteConfirmation(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete Menu'),
        content: const Text('Are you sure you want to delete this menu item?'),
        actions: [
          TextButton(
            onPressed: () {
<<<<<<< Updated upstream
              Navigator.pop(context);
=======
              Navigator.pop(context); // Close dialog
>>>>>>> Stashed changes
            },
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context); // Close dialog
<<<<<<< Updated upstream
              Navigator.pop(context); // Go back to menu page
              // Add delete functionality here
=======
              _deleteMenu(); // Call the delete function
>>>>>>> Stashed changes
            },
            child: const Text('Delete', style: TextStyle(color: Color(0xFFE15B5B))),
          ),
        ],
      ),
    );
  }
<<<<<<< Updated upstream

  void _saveChanges(BuildContext context) {
    // Implement save functionality
    // You can create a Menu model and pass the updated values back

    // Example:
    // final updatedMenu = Menu(
    //   name: nameController.text,
    //   category: categoryController.text,
    //   price: priceController.text,
    //   description: descriptionController.text,
    //   image: imageController.text,
    // );

    // Navigator.pop(context, updatedMenu);

    // For now, just go back
    Navigator.pop(context);
  }
=======
>>>>>>> Stashed changes
}
